[{"/Users/jerrywang/Code/ReactProjects/new_capat/src/index.js":"1","/Users/jerrywang/Code/ReactProjects/new_capat/src/reportWebVitals.js":"2","/Users/jerrywang/Code/ReactProjects/new_capat/src/App.js":"3","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/Toolbar.js":"4","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/ImageView.js":"5","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/ImageEditor.js":"6","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/TabbedComponent.js":"7","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/ToolsView.js":"8","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/AlgorithmView.js":"9","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/AttriCard.js":"10","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/uploadImage.js":"11","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/ImageCrop.js":"12","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/getCroppedImg.js":"13"},{"size":535,"mtime":1693565071428,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1693565071428,"results":"16","hashOfConfig":"15"},{"size":524,"mtime":1694513566589,"results":"17","hashOfConfig":"15"},{"size":172,"mtime":1694073002376,"results":"18","hashOfConfig":"15"},{"size":1004,"mtime":1694513566593,"results":"19","hashOfConfig":"15"},{"size":3925,"mtime":1694513566591,"results":"20","hashOfConfig":"15"},{"size":1058,"mtime":1694513566593,"results":"21","hashOfConfig":"15"},{"size":267,"mtime":1694267010164,"results":"22","hashOfConfig":"15"},{"size":2686,"mtime":1694513566590,"results":"23","hashOfConfig":"15"},{"size":1070,"mtime":1694341072234,"results":"24","hashOfConfig":"15"},{"size":813,"mtime":1694513566594,"results":"25","hashOfConfig":"15"},{"size":1831,"mtime":1694513566590,"results":"26","hashOfConfig":"15"},{"size":1310,"mtime":1694513566594,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"dcrzoq",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},"/Users/jerrywang/Code/ReactProjects/new_capat/src/index.js",[],[],[],"/Users/jerrywang/Code/ReactProjects/new_capat/src/reportWebVitals.js",[],[],"/Users/jerrywang/Code/ReactProjects/new_capat/src/App.js",["73"],[],"// src/App.js\nimport React from 'react';\nimport './App.css';\nimport Toolbar from './components/Toolbar.js';\nimport ImageView from './components/ImageView.js';\nimport AlgorithmList from './components/ToolsView.js';\nimport ImageUploader from './components/uploadImage';\n\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <Toolbar />\n      <div className=\"main-content\">\n        {/* <ImageUploader /> */}\n        <ImageView />\n        <AlgorithmList />\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;\n","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/Toolbar.js",[],[],"/Users/jerrywang/Code/ReactProjects/new_capat/src/components/ImageView.js",["74"],[],"// src/components/ImageWindow.js\nimport React from 'react';\nimport './ImageView.css';\nimport ImageEditor from './ImageEditor';\n\nfunction HistoryCard({ images }) {\n  return (\n    <div className=\"card\" >\n      <div className=\"card-header\">切片历史</div>\n      <div className=\"image-list\">\n        <div className=\"scrollable-images\">\n          {images.map((image, index) => (\n            <img src={image} alt={`Image ${index}`} key={index} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nfunction ImageView() {\n  const images = [\n    '/fragments/fragment1.png',\n    '/fragments/fragment1.png',\n    '/fragments/fragment1.png',\n    '/fragments/fragment1.png',\n    '/fragments/fragment1.png',\n    '/fragments/fragment1.png'\n    // 添加更多图像URL\n  ];\n  return (\n    <div className=\"image-window\">\n      <div className='image-view'>\n        <h2>图像窗口</h2>\n        <ImageEditor />\n\n      </div>\n      <HistoryCard images={images}/>\n    </div>\n  );\n}\n\nexport default ImageView;\n","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/ImageEditor.js",[],[],"/Users/jerrywang/Code/ReactProjects/new_capat/src/components/TabbedComponent.js",[],[],"/Users/jerrywang/Code/ReactProjects/new_capat/src/components/ToolsView.js",[],[],"/Users/jerrywang/Code/ReactProjects/new_capat/src/components/AlgorithmView.js",[],[],"/Users/jerrywang/Code/ReactProjects/new_capat/src/components/AttriCard.js",[],[],"/Users/jerrywang/Code/ReactProjects/new_capat/src/components/uploadImage.js",["75"],[],"import React, { useState } from 'react';\n\nfunction ImageUploader() {\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  const handleImageUpload = (e) => {\n    const file = e.target.files[0];\n    setSelectedImage(file);\n    handleUpload(file)\n  };\n\n  const handleUpload = (file) => {\n    const formData = new FormData();\n    formData.append('image', file);\n\n    fetch('http://127.0.0.1:5000/upload', {\n      method: 'POST',\n      body: formData,\n    })\n      .then(response => response.json())\n      .then(data => {\n        console.log(data); // 处理来自Flask后端的响应\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n    </div>\n  );\n}\n\nexport default ImageUploader;\n","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/ImageCrop.js",["76"],[],"import React, { useState, useRef } from 'react';\nimport Cropper from 'react-easy-crop';\nimport getCroppedImg from './getCroppedImg'; // 请根据需求创建一个函数来生成裁剪后的图像\n\nconst ImageCrop = ({ imageSrc }) => {\n  const [crop, setCrop] = useState({ x: 0, y: 0, width:200, height:150});\n  const [zoom, setZoom] = useState(1);\n  const [croppedImage, setCroppedImage] = useState(null);\n  const [cropComplete, setCropComplete] = useState(false);\n  const cropContainerRef = useRef(null);\n\n  const onCropChange = (newCrop) => {\n    setCrop(newCrop);\n    setCropComplete(false);\n  };\n\n  const onZoomChange = (newZoom) => {\n    setZoom(newZoom);\n    setCropComplete(false);\n  };\n\n  const onCropComplete = () => {\n    setCropComplete(true);\n  };\n\n  const handleDownload = async () => {\n    const croppedImageUrl = await getCroppedImg(imageSrc, crop);\n    setCroppedImage(croppedImageUrl);\n  };\n\n  return (\n    <div>\n      <h2>图像剪切</h2>\n      <div style={{ position: 'relative', width: '100%', height: 400 }}>\n        <Cropper\n          image={imageSrc}\n          crop={crop}\n          zoom={zoom}\n          aspect={4 / 3} // 设置裁剪区域的宽高比例\n          onCropChange={onCropChange}\n          onZoomChange={onZoomChange}\n          onCropComplete={onCropComplete}\n          cropSize={{ width: 200, height: 150 }} // 设置裁剪后图像的大小\n          containerStyle={{\n            position: 'relative',\n            width: '100%',\n            height: '100%',\n          }}\n        />\n      </div>\n      <button onClick={handleDownload} disabled={!cropComplete}>\n        裁剪图像\n      </button>\n      {croppedImage && (\n        <div>\n          <h3>裁剪结果</h3>\n          <img src={croppedImage} alt=\"Cropped\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImageCrop;\n","/Users/jerrywang/Code/ReactProjects/new_capat/src/components/getCroppedImg.js",["77","78"],[],"// 引入 html-to-image 库\nimport htmlToImage from 'html-to-image';\n\nasync function getCroppedImg(imageSrc, crop) {\n  const image = new Image();\n  image.src = imageSrc;\n\n  // 计算图像的实际大小\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height;\n\n  // 计算裁剪区域的实际大小和位置\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  canvas.width = crop.width;\n  canvas.height = crop.height;\n  console.log(canvas.width, canvas.height); // 检查 Canvas 大小\n  console.log(crop)\n  try {\n    ctx.drawImage(\n        image,\n        crop.x * scaleX,\n        crop.y * scaleY,\n        200 * scaleX,\n        150 * scaleY,\n        0,\n        0,\n        200,\n        150\n      );\n  } catch (error) {\n    console.error('剪切图像时出错：', error);\n  }\n  \n  // 将裁剪后的图像保存为 Data URL\n  const croppedImageUrl = canvas.toDataURL('image/jpeg');\n  console.log(croppedImageUrl)\n  // 如果需要将裁剪后的图像保存为文件，可以使用以下代码：\n  const blob = await new Promise((resolve) => canvas.toBlob(resolve, 'image/jpeg'));\n  const croppedFile = new File([blob], 'cropped.jpg', { type: 'image/jpeg' });\n\n  return croppedImageUrl;\n}\n\nexport default getCroppedImg;\n",{"ruleId":"79","severity":1,"message":"80","line":7,"column":8,"nodeType":"81","messageId":"82","endLine":7,"endColumn":21},{"ruleId":"83","severity":1,"message":"84","line":13,"column":13,"nodeType":"85","endLine":13,"endColumn":67},{"ruleId":"79","severity":1,"message":"86","line":4,"column":10,"nodeType":"81","messageId":"82","endLine":4,"endColumn":23},{"ruleId":"79","severity":1,"message":"87","line":10,"column":9,"nodeType":"81","messageId":"82","endLine":10,"endColumn":25},{"ruleId":"79","severity":1,"message":"88","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":19},{"ruleId":"79","severity":1,"message":"89","line":40,"column":9,"nodeType":"81","messageId":"82","endLine":40,"endColumn":20},"no-unused-vars","'ImageUploader' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'selectedImage' is assigned a value but never used.","'cropContainerRef' is assigned a value but never used.","'htmlToImage' is defined but never used.","'croppedFile' is assigned a value but never used."]